import sqlite3
import requests
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
import matplotlib.pyplot as plt  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
from io import BytesIO  # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID"))  # –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π user_id

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("btc_portfolio.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
cursor.execute("""
CREATE TABLE IF NOT EXISTS purchases (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    amount REAL,
    price REAL,
    total REAL,
    date TEXT
)
""")
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
AMOUNT, PRICE, MOONSHOT_PRICE = range(3)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ BTC
def get_btc_price():
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {"ids": "bitcoin", "vs_currencies": "usd"}
    response = requests.get(url, params=params).json()
    return response["bitcoin"]["usd"]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def is_user_allowed(user_id):
    return user_id == ALLOWED_USER_ID

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É"), KeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")],
        [KeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("üöÄ Moonshot")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    await update.message.reply_text(
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π BTC Moonshot Bot.\n"
        "–ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –≤–∞–º –¥–æ—Å—Ç–∏—á—å $100,000, —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–∫—É–ø–∞—è BTC."
    )
    await main_menu(update, context)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ (–Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞)
async def add_purchase_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ BTC –≤—ã –∫—É–ø–∏–ª–∏? ü™ô")
    return AMOUNT

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ (–≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
async def add_purchase_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    try:
        amount = float(update.message.text)
        context.user_data["amount"] = amount
        await update.message.reply_text("–ü–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ –≤—ã –∫—É–ø–∏–ª–∏? üíµ")
        return PRICE
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return AMOUNT

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ (–≤–≤–æ–¥ —Ü–µ–Ω—ã)
async def add_purchase_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    try:
        price = float(update.message.text)
        amount = context.user_data["amount"]
        total = amount * price

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        cursor.execute("""
        INSERT INTO purchases (amount, price, total, date)
        VALUES (?, ?, ?, datetime('now'))
        """, (amount, price, total))
        conn.commit()

        await update.message.reply_text(
            f"üí∞ –ü–æ–∫—É–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount:.8f} BTC\n"
            f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${price:,.0f}\n"
            f"–°—É–º–º–∞: ${total:,.0f}"
        )
        await main_menu(update, context)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return PRICE

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    cursor.execute("SELECT SUM(amount), SUM(total) FROM purchases")
    result = cursor.fetchone()
    total_btc = result[0] or 0
    total_invested = result[1] or 0

    current_price = get_btc_price()
    current_value = total_btc * current_price
    profit = current_value - total_invested
    profit_percent = (profit / total_invested * 100) if total_invested > 0 else 0

    goal = 100000  # –¶–µ–ª—å: $100,000
    progress_percent = (current_value / goal) * 100 if goal > 0 else 0

    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text_message = (
        f"üìä –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n"
        f"- –û–±—â–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${total_invested:,.0f}\n"
        f"- –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${current_value:,.0f} ({profit:+,.0f}, {profit_percent:+.1f}%)\n"
        f"- BTC –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {total_btc:.8f}\n"
        f"- –î–æ —Ü–µ–ª–∏ ($100,000): ${goal - current_value:,.0f}\n\n"
        f"üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent:.1f}%"
    )

    await update.message.reply_text(text_message)

    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    labels = ["–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏"]
    values = [current_value, max(goal - current_value, 0)]  # –û—Å—Ç–∞—Ç–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    colors = ["#4CAF50", "#FFC107"]  # –ó–µ–ª–µ–Ω—ã–π –∏ –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç–∞
    explode = (0.1, 0)  # –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞

    fig, ax = plt.subplots(figsize=(6, 6))
    ax.pie(
        values,
        explode=explode,
        labels=labels,
        autopct="%1.1f%%",
        startangle=90,
        colors=colors,
        textprops={"fontsize": 12}
    )
    ax.set_title("–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏ ($100,000)", fontsize=14)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buffer = BytesIO()
    plt.savefig(buffer, format="png")
    buffer.seek(0)
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    await update.message.reply_photo(photo=buffer)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìÖ –ò—Å—Ç–æ—Ä–∏—è"
async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT amount, price, total, date FROM purchases ORDER BY date DESC")
    purchases = cursor.fetchall()

    if not purchases:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–∫—É–ø–∫–∞—Ö.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    history_text = "üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n\n"
    for purchase in purchases:
        amount, price, total, date = purchase
        history_text += (
            f"–î–∞—Ç–∞: {date}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount:.8f} BTC\n"
            f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${price:,.0f}\n"
            f"–°—É–º–º–∞: ${total:,.0f}\n"
            "‚Äî\n"
        )

    await update.message.reply_text(history_text)

# Moonshot Meter
async def moonshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    await update.message.reply_text("üöÄ –î–æ –∫–∞–∫–æ–π —Ü–µ–Ω—ã –º–æ–∂–µ—Ç –≤—ã—Ä–∞—Å—Ç–∏ BTC?")
    return MOONSHOT_PRICE

async def moonshot_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    try:
        target_price = float(update.message.text)
        cursor.execute("SELECT SUM(amount) FROM purchases")
        total_btc = cursor.fetchone()[0] or 0

        current_value = total_btc * target_price
        profit = current_value - (get_btc_price() * total_btc)

        await update.message.reply_text(
            f"üöÄ –ï—Å–ª–∏ —Ü–µ–Ω–∞ BTC –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç ${target_price:,.0f}:\n"
            f"- –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å: ${current_value:,.0f}\n"
            f"- –ü—Ä–∏–±—ã–ª—å: +${profit:,.0f}"
        )
        await main_menu(update, context)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return MOONSHOT_PRICE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É$"), add_purchase_start)],
        states={
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_purchase_amount)],
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_purchase_price)]
        },
        fallbacks=[]
    )

    # –î–∏–∞–ª–æ–≥ Moonshot Meter
    moonshot_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üöÄ Moonshot$"), moonshot)],
        states={
            MOONSHOT_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, moonshot_price)]
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    application.add_handler(moonshot_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^üìä –ü—Ä–æ–≥—Ä–µ—Å—Å$"), progress))
    application.add_handler(MessageHandler(filters.Regex("^üìÖ –ò—Å—Ç–æ—Ä–∏—è$"), history))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏

    application.run_polling()

if __name__ == "__main__":
    main()